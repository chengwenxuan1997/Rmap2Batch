// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_dp
NumericVector rcpp_dp(double alpha, int nCluster, std::vector<int> pointsPerCluster, std::vector<int> ClusterLabel, std::vector<double> alphaPrior, std::vector<double> parPrior, std::vector<double> data, std::vector<double> mu, std::vector<double> sigma, std::vector<double> predArray, int nrun);
RcppExport SEXP _Rmap2batch_rcpp_dp(SEXP alphaSEXP, SEXP nClusterSEXP, SEXP pointsPerClusterSEXP, SEXP ClusterLabelSEXP, SEXP alphaPriorSEXP, SEXP parPriorSEXP, SEXP dataSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP predArraySEXP, SEXP nrunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type nCluster(nClusterSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type pointsPerCluster(pointsPerClusterSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ClusterLabel(ClusterLabelSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type alphaPrior(alphaPriorSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type parPrior(parPriorSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type predArray(predArraySEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dp(alpha, nCluster, pointsPerCluster, ClusterLabel, alphaPrior, parPrior, data, mu, sigma, predArray, nrun));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rmap2batch_rcpp_dp", (DL_FUNC) &_Rmap2batch_rcpp_dp, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rmap2batch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
